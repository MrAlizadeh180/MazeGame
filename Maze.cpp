#include <iostream>
#include <time.h>
#include <conio.h>
#include <string>
#include <windows.h>
using namespace std; 


// color definition
#define Green 0x0A
#define Red 0x0C
#define Aqua 0x0B
#define Yellow 0x0E
#define ConsoleDefaultColor 0x07
#define White 0x0F
#define Purple 0x0D

// Functions
unsigned char colorChoice();
char getKeyPress();
void printLevel(int);
void setMe(int);
bool isExit(int, int, int);
bool isWall(int, int, int);
int getPos(int, int&);
void update(int, int, int);
void makeSpace(int, int, int);
void ShowDirection(int x,int y, string& direction, int dir_size,int& counter);
void setcolor( unsigned char color );

const char space = ' ';
const char me = '@';
const string alphabets=" ABCDEFGHIJKLMNOPQRSTUVWXY";
unsigned char color_choice;
char lvl1[51][51] = { 
                 
					{'+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+',' ','+','+','+','+','+','+','+'},
                    {'+',' ','+',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','+',' ',' ',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ',' ',' ','+','@',' ',' ',' ',' ',' ',' ','+'},
                    {'+',' ','+',' ','+','+','+','+','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+','+','+','+','+',' ','+',' ','+',' ','+','+','+','+','+','+','+',' ','+',' ','+','+','+','+','+',' ','+'},
                    {'+',' ',' ',' ','+',' ',' ',' ','+',' ','+',' ','+',' ',' ',' ','+',' ','+',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ','+',' ','+',' ','+',' ',' ',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ',' ',' ','+'},
                    {'+','+','+','+','+',' ','+','+','+',' ','+',' ','+','+','+','+','+',' ','+','+','+','+','+',' ','+',' ','+',' ','+','+','+','+','+',' ','+',' ','+','+','+',' ','+',' ','+','+','+',' ','+','+','+','+','+'},
                    {'+',' ',' ',' ','+',' ',' ',' ',' ',' ','+',' ','+',' ',' ',' ','+',' ','+',' ',' ',' ',' ',' ','+',' ','+',' ',' ',' ','+',' ',' ',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ',' ',' ','+'},
                    {'+',' ','+','+','+','+','+','+','+','+','+',' ','+',' ','+',' ','+',' ','+',' ','+','+','+','+','+',' ','+','+','+',' ','+',' ','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+',' ','+'},
                    {'+',' ',' ',' ',' ',' ','+',' ',' ',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','+',' ',' ',' ',' ',' ','+'},
                    {'+','+','+','+','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+','+','+','+','+','+','+','+','+',' ','+','+','+',' ','+','+','+','+','+',' ','+',' ','+','+','+','+','+'},
                    {'+',' ','+',' ',' ',' ',' ',' ','+',' ',' ',' ','+',' ','+',' ',' ',' ','+',' ','+',' ','+',' ','+',' ',' ',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ','+'},
                    {'+',' ','+',' ','+','+','+','+','+','+','+',' ','+',' ','+','+','+',' ','+',' ','+',' ','+',' ','+',' ','+','+','+','+','+',' ','+',' ','+','+','+','+','+',' ','+','+','+','+','+','+','+','+','+',' ','+'},
                    {'+',' ',' ',' ','+',' ',' ',' ',' ',' ','+',' ','+',' ','+',' ',' ',' ','+',' ',' ',' ','+',' ','+',' ',' ',' ',' ',' ',' ',' ','+',' ','+',' ',' ',' ','+',' ',' ',' ',' ',' ','+',' ',' ',' ','+',' ','+'},
                    {'+','+','+','+','+',' ','+','+','+',' ','+',' ','+',' ','+',' ','+','+','+',' ','+',' ','+',' ','+','+','+','+','+','+','+','+','+','+','+',' ','+',' ','+',' ','+',' ','+',' ','+','+','+',' ','+',' ','+'},
                    {'+',' ',' ',' ',' ',' ','+',' ',' ',' ','+',' ','+',' ','+',' ','+',' ',' ',' ','+',' ','+',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ',' ',' ','+',' ','+',' ','+',' ','+',' ',' ',' ',' ',' ','+',' ','+'},
                    {'+',' ','+','+','+','+','+',' ','+','+','+',' ','+',' ','+',' ','+',' ','+','+','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+','+','+','+','+',' ','+',' ','+',' ','+','+','+','+','+','+','+',' ','+'},
                    {'+',' ','+',' ',' ',' ',' ',' ',' ',' ',' ',' ','+',' ','+',' ','+',' ',' ',' ','+',' ','+',' ','+',' ','+',' ','+',' ','+',' ',' ',' ','+',' ',' ',' ','+',' ','+',' ',' ',' ',' ',' ',' ',' ',' ',' ','+'},
                    {'+',' ','+','+','+','+','+','+','+','+','+','+','+',' ','+',' ','+','+','+',' ','+','+','+',' ','+',' ','+',' ','+',' ','+','+','+',' ','+',' ','+','+','+',' ','+','+','+','+','+','+','+',' ','+','+','+'},
                    {'+',' ',' ',' ',' ',' ',' ',' ','+',' ',' ',' ','+',' ','+',' ',' ',' ','+',' ','+',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ',' ',' ','+',' ',' ',' ','+',' ','+',' ',' ',' ',' ',' ','+',' ',' ',' ','+'},
                    {'+','+','+','+','+','+','+','+','+',' ','+',' ','+',' ','+','+','+',' ','+','+','+',' ','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+',' ','+','+','+',' ','+',' ','+','+','+',' ','+'},
                    {'+',' ','+',' ',' ',' ',' ',' ',' ',' ','+',' ','+',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ',' ',' ','+',' ',' ',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ','+',' ','+'},
                    {'+',' ','+',' ','+','+','+','+','+','+','+','+','+',' ','+','+','+','+','+',' ','+','+','+','+','+','+','+',' ','+','+','+',' ','+','+','+',' ','+',' ','+','+','+',' ','+','+','+','+','+',' ','+',' ','+'},
                    {'+',' ',' ',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ','+',' ',' ',' ',' ',' ','+',' ',' ',' ',' ',' ','+',' ',' ',' ',' ',' ','+',' ','+',' ','+',' ',' ',' ',' ',' ','+',' ',' ',' ',' ',' ','+',' ','+'},
                    {'+','+','+','+','+',' ','+','+','+','+','+',' ','+','+','+',' ','+','+','+','+','+','+','+','+','+',' ','+','+','+','+','+',' ','+',' ','+',' ','+','+','+','+','+','+','+',' ','+','+','+','+','+',' ','+'},
                    {'+',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ',' ',' ','+',' ','+',' ',' ',' ','+'},
                    {'+',' ','+','+','+','+','+',' ','+','+','+',' ','+','+','+','+','+',' ','+',' ','+','+','+','+','+','+','+',' ','+',' ','+','+','+','+','+',' ','+','+','+','+','+','+','+',' ','+',' ','+',' ','+',' ','+'},
                    {'+',' ',' ',' ',' ',' ',' ',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ','+',' ','+',' ','+',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ','+',' ','+',' ',' ',' ','+',' ','+'},
                    {'+','+','+','+','+','+','+','+','+',' ','+','+','+','+','+',' ','+','+','+',' ','+',' ','+','+','+',' ','+','+','+',' ','+',' ','+',' ','+','+','+',' ','+','+','+',' ','+',' ','+','+','+','+','+','+','+'},
                    {'+',' ',' ',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ','+',' ','+',' ',' ',' ','+',' ','+',' ','+',' ',' ',' ',' ',' ',' ',' ','+',' ',' ',' ','+',' ','+',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ','+'},
                    {'+',' ','+','+','+',' ','+','+','+','+','+','+','+',' ','+','+','+',' ','+',' ','+',' ','+',' ','+','+','+','+','+','+','+','+','+','+','+',' ','+',' ','+',' ','+','+','+','+','+',' ','+',' ','+',' ','+'},
                    {'+',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ',' ',' ','+',' ','+',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ','+',' ','+',' ',' ',' ','+',' ',' ',' ','+',' ','+',' ','+'},
                    {'+','+','+','+','+','+','+',' ','+',' ','+','+','+','+','+','+','+',' ','+',' ','+','+','+','+','+',' ','+',' ','+','+','+','+','+','+','+','+','+','+','+','+','+',' ','+',' ','+','+','+','+','+',' ','+'},
                    {'+',' ','+',' ',' ',' ',' ',' ','+',' ','+',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ',' ',' ','+',' ','+',' ',' ',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ','+'},
                    {'+',' ','+',' ','+','+','+','+','+',' ','+',' ','+','+','+',' ','+','+','+','+','+','+','+',' ','+','+','+','+','+','+','+',' ','+',' ','+','+','+','+','+','+','+','+','+','+','+',' ','+',' ','+','+','+'},
                    {'+',' ','+',' ','+',' ',' ',' ','+',' ','+',' ',' ',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','+',' ',' ',' ',' ',' ','+'},
                    {'+',' ','+',' ','+','+','+',' ','+',' ','+','+','+','+','+','+','+',' ','+',' ','+','+','+',' ','+',' ','+','+','+','+','+','+','+',' ','+',' ','+','+','+','+','+',' ','+','+','+','+','+','+','+','+','+'},
                    {'+',' ','+',' ',' ',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ','+',' ','+',' ','+',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ',' ',' ','+',' ',' ',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ',' ',' ','+'},
                    {'+',' ','+','+','+','+','+',' ','+','+','+','+','+',' ','+',' ','+',' ','+','+','+',' ','+','+','+','+','+',' ','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+',' ','+',' ','+',' ','+',' ','+'},
                    {'+',' ',' ',' ','+',' ','+',' ','+',' ',' ',' ',' ',' ','+',' ','+',' ',' ',' ','+',' ',' ',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','+',' ','+',' ','+',' ','+',' ','+'},
                    {'+','+','+',' ','+',' ','+',' ','+',' ','+','+','+','+','+',' ','+',' ','+',' ','+','+','+','+','+',' ','+','+','+',' ','+',' ','+','+','+','+','+','+','+','+','+',' ','+',' ','+',' ','+',' ','+','+','+'},
                    {'+',' ','+',' ','+',' ','+',' ',' ',' ','+',' ',' ',' ',' ',' ','+',' ','+',' ',' ',' ',' ',' ','+',' ',' ',' ','+',' ','+',' ',' ',' ',' ',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ','+'},
                    {'+',' ','+',' ','+',' ','+','+','+','+','+',' ','+','+','+','+','+',' ','+','+','+',' ','+','+','+','+','+','+','+',' ','+','+','+','+','+','+','+',' ','+',' ','+','+','+','+','+','+','+','+','+',' ','+'},
                    {'+',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ',' ',' ','+',' ','+',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ',' ',' ','+',' ','+'},
                    {'+',' ','+','+','+','+','+','+','+','+','+','+','+',' ','+',' ','+','+','+','+','+',' ','+','+','+',' ','+',' ','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+',' ','+',' ','+'},
                    {'+',' ',' ',' ',' ',' ',' ',' ',' ',' ','+',' ',' ',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ','+',' ','+',' ','+',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','+',' ','+',' ',' ',' ','+'},
                    {'+','+','+','+','+','+','+','+','+',' ','+','+','+','+','+',' ','+',' ','+',' ','+','+','+',' ','+','+','+',' ','+',' ','+',' ','+',' ','+',' ','+','+','+','+','+','+','+',' ','+',' ','+','+','+','+','+'},
                    {'+',' ',' ',' ',' ',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ',' ',' ','+',' ','+',' ',' ',' ','+',' ',' ',' ','+',' ','+',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ','+',' ','+',' ',' ',' ',' ',' ','+'},
                    {'+',' ','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+',' ','+','+','+','+','+',' ','+','+','+',' ','+','+','+','+','+','+','+','+','+','+','+',' ','+','+','+',' ','+','+','+',' ','+'}, 
                    {'+',' ','+',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ','+',' ','+'}, 
                    {'+',' ','+',' ','+',' ','+',' ','+',' ','+','+','+','+','+','+','+',' ','+','+','+',' ','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+',' ','+',' ','+','+','+','+','+','+','+','+','+',' ','+'}, 
                    {'+',' ',' ',' ','+',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','+',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','+'},
                    {'+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+',' ','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+','+'}


                 
};

int main(void)
{
    int lvl;
    lvl=1;
    
    string direction = "22A=>";
    int extra_dir_size = 4; // in this way the player can know the last 5 turns
    int valid_turns_counter = 0; // the num of player valid turns 
    int all_turns_counter = 0; // the num of player turns 
  
    system("CLS");
    setMe(lvl);
    printLevel(lvl);
 
    int x, y;
    time_t start, ending; 
    time(&start);
    while (true){

        char move = getKeyPress();

        int x_move = 0;
        int y_move = 0;

        switch (move){
        case 'u':
            x_move = -1;
            y_move = 0;
            break;
        case 'd':
            x_move = 1;
            y_move = 0;
            break;
        case 'l':
            y_move = -1;
            x_move = 0;
            break;
        case 'r':
            y_move = 1;  
            x_move = 0;      
            break;
        default:
            break;
        }

        x = getPos(lvl, y);
        all_turns_counter ++; 

        if (!isWall(x + x_move, y + y_move, lvl) && !isWall(x + 2*x_move, y + 2*y_move, lvl)){
            if (isExit(x + 2*x_move, y + 2*y_move, lvl)){
                valid_turns_counter++;
                system("CLS");
                cout << "You Won!" << endl << endl;
                time(&ending);
                cout << "You won the Game in: ";
                setcolor(Green);
                cout << difftime(ending, start);
                setcolor(ConsoleDefaultColor);
                cout << " seconds " << endl << endl;
                cout << "Your valid turns: " ;
                setcolor(Green);
                cout << valid_turns_counter << endl << endl;
                setcolor(ConsoleDefaultColor);
                cout << "All of your turns: ";
                setcolor(Green);
                cout << all_turns_counter << endl << endl;
                break;
            }
            system("CLS");
            makeSpace(lvl, x, y);
            update(lvl, x + 2*x_move, y + 2*y_move);
            ShowDirection(x+2*x_move,y+2*y_move,direction,extra_dir_size,valid_turns_counter);
            valid_turns_counter ++;
        }
        else {
        	cout << endl << "Direction: ";
    		setcolor(Green); 
    		cout <<direction << endl;
    		setcolor(ConsoleDefaultColor);
		}
    }
    return 0;
}

void ShowDirection(int x,int y, string& direction, int extra_dir_size,int& valid_turns_counter){// this function shows the direction of player moves
	string show="";
	show=alphabets[(x+1)/2];
	y = (y+1)/2;
    string num_str  = to_string(y);
    if(y < 10) num_str = "0"+ num_str;
    if( valid_turns_counter >= extra_dir_size ){
    	direction.erase (0,5);
    	direction += num_str + show + "=>"; 
    }
    else{
    	direction += num_str + show + "=>";
    }
    cout << endl << "Direction: ";
    setcolor(Green); 
    cout <<direction << endl;
    setcolor(ConsoleDefaultColor);
}

void printLevel(int lvl){ // this function prints the borad of Maze game
    cout << "\n";
    for (int i = 0; i != 51; ++i){
            cout << endl << "\t\t\t\t";
            for (int j = 0; j != 51; ++j){
                if(j == 0 && i%2 != 0){
                    cout << alphabets[(i+1)/2];
                }
                else cout <<" ";                
                setcolor( ConsoleDefaultColor );  // Initial color for program
                if(lvl1[i][j] == '@')setcolor( color_choice );
                cout << lvl1[i][j] <<" ";
                setcolor( ConsoleDefaultColor );
            }
        } cout << endl;
    cout << endl << "\t\t\t\t" << "    1     2     3     4     5     6     7     8     9     10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25" << endl;
}

void setMe(int lvl){
    // set palyer position and color
    int x, y;
    color_choice = colorChoice();
    system("CLS");

    x = getPos(lvl, y);
    lvl1[x][y] = me;
}

char getKeyPress(){
    // this function gets a key (ARROW KEY) from player and returns char : u -> UP , l -> LEFT, r -> RIGHT, d -> DWON  
    /*
    to find the ascii values of arrow keys we can use getch func in this way , it should be used twise 
    at first if the player presses any of arrow keys the return value of getch would be 224
    */
    int key = getch(); 
    if (key == 224){ 
        key = getch();

        if (key == 72) {
            return 'u';  //up
        } else if (key == 75){
            return 'l';  //left
        } else if (key == 77){
            return 'r';  //right
        } else if (key == 80){
            return 'd';  //dwon
        }
    }
    return '0';
}

bool isExit(int x, int y, int lvl){// this funvtion checks if player is in the exit of the Maze or not
   if ( x == 51 && y == 33) return true;
   return false;
}

int getPos(int lvl, int &y){ // this function is useful to find the position of player
    int xCoord;
    for (int i = 0; i != 51; ++i){
        for (int j = 0; j != 51; ++j){
            if (lvl1[i][j] == '@'){
                xCoord = i;
                y = j;
                return xCoord;
            }
        }
    }
    return 0;
}

bool isWall(int x, int y, int lvl){ // this function checks that palyer can move or not
	if(x<=0||y<=0 || lvl1[x][y] == '+'){
        setcolor(Red);
        cout << "\n\t\tCannot move! That is a wall / boundary.";
        setcolor(Red);
        Sleep(1200);
        system("CLS");
        printLevel(lvl);
        return true;
	}
    return false;
}

void update(int lvl, int x, int y){ // this function updates the board of the Game after receiving the position of player
        lvl1[x][y] = me;
        printLevel(lvl);

}

void makeSpace(int lvl, int x, int y){
          lvl1[x][y] = space;

}

void setcolor( unsigned char color ){ 
  //this function gets an unsigned char that is releted to the color and sets the console color
  SetConsoleTextAttribute( GetStdHandle( STD_OUTPUT_HANDLE ), color );
}

unsigned char colorChoice(){
    // this function returns an unsigned char that is releted to color that player chooses
    string color_arr[6] = {"Aqua", "Red", "Green", "White", "Yellow", "Purple"};
    unsigned char color_code_arr[6] = {0x0B, 0x0C, 0x0A, 0x0F, 0x0E, 0x0D};
    int choice;
    cout << "Please choose a color for playing the game " << endl;
    for(int i = 1; i <= 6; i++){ // printing the colors and numbers that are releated to any of them
        cout << i;
        setcolor(color_code_arr[i-1]);
        cout << ": "<< color_arr[i-1] << endl;
        setcolor(ConsoleDefaultColor); // white color
    }
    cout << "Your choice: ";
    cin >> choice;
    if (1 <= choice && choice <= 6)return color_code_arr[choice-1];
    // if player enters a num that is not in {1,2,3,4,5,6} the console would be cleard and then the player should choose a new number
    system("CLS");
    colorChoice();
}
